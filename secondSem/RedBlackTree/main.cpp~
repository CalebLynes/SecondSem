#include <iostream>
#include <cstring>

using namespace std;

//Node struct
struct Node {
  int color; // 1 = black, 2 = red
  int data;
  Node* left = NULL;
  Node* right = NULL;
};

//function prototypes
void insert(Node* head, Node* newnode);
void print(Node* head, int space);

//---------- M A I N ----------
int main() {
  Node* head = NULL;
  int size = 1;

  char input[] = {"6 3 4 2 8 7 5 9 1"};
  
  //find size
  for (int i = 0; i < strlen(input); i++) {
    if (input[i] == ' ') {
      size++;
    }
  }
  cout << "Size: " << size << endl;

  //add to int array
  int arr[100];
  int j = 0;
  char* a = strtok(input, " ");
  while (a != NULL) {
    int key = atoi(a);
    arr[j] = key;
    j++;
    a = strtok(NULL, " ");
  }

  //insert each number into tree
  for (int i = 0; i < size; i++) {
    Node* n = new Node;
    n->data = arr[i];
    insert(head, n);
  }
  
  
  return 0;
}
//------ E N D   M A I N ------


//----- Insert -----
void insert(Node* head, Node* newnode) {
  if (head == NULL) {
    //tree is empty
    head = newnode;
    head->color = 1;
  }
  else {
    //tree is not empty
    if (n->data > head->data) {
      //recursively call on right
      insert(head->right, n);
    }
    if (n->data < head->data) {
      //recursively call on left
      insert(head->left, n);
    }
  }
}

//----- Print -----
void print(Node* head, int space) {
  //base case
  if (head == NULL) {
    return;
  }

  //increase indentation
  space += 10;

  //right child
  print(head->right, space);

  //print indent
  cout << endl;
  for (int i = 10; i < space; i++) {
    cout << " ";
  }
  //print current node
  cout << head->data << endl;

  //left child
  print(head->left, space);
}